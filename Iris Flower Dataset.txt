=========================================================================
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
=============================================================================
df
===============================================
df.info()
===============================================
df.describe()
==================================================
import seaborn as sns
import matplotlib.pyplot as plt
=======================================================
def boxPlot(y):
    sns.boxplot(x="species", y=y, data=df)


plt.figure(figsize=(10,10))
for i, column in enumerate(df.columns[:-1]):
    plt.subplot(2, 2, i + 1)
    boxPlot(column)
    plt.title(f'{column} distribution by species')
plt.show()
==========================================================
def violinPlot(y):
    sns.violinplot(data = df, x = 'species', y = y, inner="box")


plt.figure(figsize=(14, 10))
for i, column in enumerate(df.columns[:-1]):
    plt.subplot(2, 2, i + 1)
    violinPlot(column)
    plt.title(f'{column} distribution by species')
plt.show()
======================================================
# import train_test_split to split the dataset into two parts for training and testing
from sklearn.model_selection import train_test_split

# remove species(target) column in input feature(X)
X = df.drop(['species'], axis=1)
# Output/Target (y)
y = df['species']
=========================================================
# import StandardScaler for Scaling
from sklearn.preprocessing import StandardScaler

cols = X_train.columns
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train = pd.DataFrame(X_train, columns=[cols])
X_test = pd.DataFrame(X_test, columns=[cols])
X_train.head()
=======================================================
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay

svc=SVC()
svc.fit(X_train,y_train)

y_pred=svc.predict(X_test)

print('Model accuracy score with default hyperparameters: {0:0.2f}'. format(accuracy_score(y_test, y_pred)))
==========================================================================
y_pred_train = svc.predict(X_train)
print(y_pred_train)
print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))
===============================================================
cm = confusion_matrix(y_test, y_pred)
print(cm)